// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/jwtmanager/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/common/jwtmanager/interface.go -destination=internal/common/mocks/mock_jwtmanager.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jwtmanager "github.com/ciscapello/api-gateway/internal/common/jwtmanager"
	userEntity "github.com/ciscapello/api-gateway/internal/domain/entity/user_entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIJwtManager is a mock of IJwtManager interface.
type MockIJwtManager struct {
	ctrl     *gomock.Controller
	recorder *MockIJwtManagerMockRecorder
}

// MockIJwtManagerMockRecorder is the mock recorder for MockIJwtManager.
type MockIJwtManagerMockRecorder struct {
	mock *MockIJwtManager
}

// NewMockIJwtManager creates a new mock instance.
func NewMockIJwtManager(ctrl *gomock.Controller) *MockIJwtManager {
	mock := &MockIJwtManager{ctrl: ctrl}
	mock.recorder = &MockIJwtManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJwtManager) EXPECT() *MockIJwtManagerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIJwtManager) Generate(uid uuid.UUID, role userEntity.Role) (jwtmanager.ReturnTokenType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", uid, role)
	ret0, _ := ret[0].(jwtmanager.ReturnTokenType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockIJwtManagerMockRecorder) Generate(uid, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIJwtManager)(nil).Generate), uid, role)
}

// GetUserId mocks base method.
func (m *MockIJwtManager) GetUserId(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockIJwtManagerMockRecorder) GetUserId(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockIJwtManager)(nil).GetUserId), ctx)
}

// GetUserRole mocks base method.
func (m *MockIJwtManager) GetUserRole(ctx context.Context) (userEntity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx)
	ret0, _ := ret[0].(userEntity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockIJwtManagerMockRecorder) GetUserRole(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockIJwtManager)(nil).GetUserRole), ctx)
}

// VerifyRefreshToken mocks base method.
func (m *MockIJwtManager) VerifyRefreshToken(refreshTokenStr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", refreshTokenStr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockIJwtManagerMockRecorder) VerifyRefreshToken(refreshTokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockIJwtManager)(nil).VerifyRefreshToken), refreshTokenStr)
}
