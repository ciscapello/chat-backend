// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/user_service/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/service/user_service/interface.go -destination=internal/common/mocks/mock_userservice.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	jwtmanager "github.com/ciscapello/api-gateway/internal/common/jwtmanager"
	user_entity "github.com/ciscapello/api-gateway/internal/domain/entity/user_entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockIUserService) Authentication(email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication.
func (mr *MockIUserServiceMockRecorder) Authentication(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockIUserService)(nil).Authentication), email)
}

// CheckCode mocks base method.
func (m *MockIUserService) CheckCode(uuid uuid.UUID, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCode", uuid, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCode indicates an expected call of CheckCode.
func (mr *MockIUserServiceMockRecorder) CheckCode(uuid, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCode", reflect.TypeOf((*MockIUserService)(nil).CheckCode), uuid, code)
}

// FindUsersByUsername mocks base method.
func (m *MockIUserService) FindUsersByUsername(username string, id uuid.UUID) ([]user_entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersByUsername", username, id)
	ret0, _ := ret[0].([]user_entity.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersByUsername indicates an expected call of FindUsersByUsername.
func (mr *MockIUserServiceMockRecorder) FindUsersByUsername(username, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersByUsername", reflect.TypeOf((*MockIUserService)(nil).FindUsersByUsername), username, id)
}

// GetAllUsers mocks base method.
func (m *MockIUserService) GetAllUsers() ([]user_entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]user_entity.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIUserServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIUserService)(nil).GetAllUsers))
}

// GetTokens mocks base method.
func (m *MockIUserService) GetTokens(id uuid.UUID, role user_entity.Role) (jwtmanager.ReturnTokenType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", id, role)
	ret0, _ := ret[0].(jwtmanager.ReturnTokenType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokens indicates an expected call of GetTokens.
func (mr *MockIUserServiceMockRecorder) GetTokens(id, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockIUserService)(nil).GetTokens), id, role)
}

// GetUser mocks base method.
func (m *MockIUserService) GetUser(uuid uuid.UUID) (user_entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", uuid)
	ret0, _ := ret[0].(user_entity.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserServiceMockRecorder) GetUser(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserService)(nil).GetUser), uuid)
}

// GetUserRole mocks base method.
func (m *MockIUserService) GetUserRole(id uuid.UUID) user_entity.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", id)
	ret0, _ := ret[0].(user_entity.Role)
	return ret0
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockIUserServiceMockRecorder) GetUserRole(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockIUserService)(nil).GetUserRole), id)
}

// UpdateUser mocks base method.
func (m *MockIUserService) UpdateUser(uuid uuid.UUID, fields user_entity.UpdateUserRequest) (user_entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", uuid, fields)
	ret0, _ := ret[0].(user_entity.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserServiceMockRecorder) UpdateUser(uuid, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserService)(nil).UpdateUser), uuid, fields)
}
