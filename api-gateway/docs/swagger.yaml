definitions:
  jwtmanager.ReturnTokenType:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: string
      status_code:
        type: integer
    type: object
  userEntity.PublicUser:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  userEntity.Role:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Admin
    - Regular
  userEntity.UpdateUserRequest:
    properties:
      code:
        type: string
      email:
        type: string
      enabled:
        type: boolean
      role:
        $ref: '#/definitions/userEntity.Role'
      username:
        type: string
    type: object
  userhandler.checkCodeReq:
    properties:
      code:
        type: string
      id:
        type: string
    type: object
  userhandler.refreshRequest:
    properties:
      refreshToken:
        example: your_refresh_token_here
        type: string
    type: object
  userhandler.requestBody:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  userhandler.resp:
    properties:
      id:
        type: string
    type: object
info:
  contact: {}
  title: API Gateway
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/userEntity.PublicUser'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User with optional fields
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/userEntity.PublicUser'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/userEntity.PublicUser'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - users
  /users/auth:
    post:
      consumes:
      - application/json
      description: Authentication by username and email
      parameters:
      - description: Request body containing username and email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/userhandler.resp'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Authentication
      tags:
      - users
  /users/check-code:
    post:
      consumes:
      - application/json
      description: Check code with id and code
      parameters:
      - description: Request body containing ID and Code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.checkCodeReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/jwtmanager.ReturnTokenType'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Check code
      tags:
      - users
  /users/refresh:
    post:
      consumes:
      - application/json
      description: Refresh token
      parameters:
      - description: Request body containing refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.refreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/jwtmanager.ReturnTokenType'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Refresh
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
