// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/user_service/user_repo_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/service/user_service/user_repo_interface.go -destination=internal/common/mocks/mock_userrepo.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	userEntity "github.com/ciscapello/api_gateway/internal/domain/entity/user_entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckUserIfExistsByEmail mocks base method.
func (m *MockUserRepo) CheckUserIfExistsByEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIfExistsByEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserIfExistsByEmail indicates an expected call of CheckUserIfExistsByEmail.
func (mr *MockUserRepoMockRecorder) CheckUserIfExistsByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIfExistsByEmail", reflect.TypeOf((*MockUserRepo)(nil).CheckUserIfExistsByEmail), email)
}

// CheckUserIfExistsByUsername mocks base method.
func (m *MockUserRepo) CheckUserIfExistsByUsername(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIfExistsByUsername", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserIfExistsByUsername indicates an expected call of CheckUserIfExistsByUsername.
func (mr *MockUserRepoMockRecorder) CheckUserIfExistsByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIfExistsByUsername", reflect.TypeOf((*MockUserRepo)(nil).CheckUserIfExistsByUsername), username)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(user userEntity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), user)
}

// FindUsersByUsername mocks base method.
func (m *MockUserRepo) FindUsersByUsername(username string, uid uuid.UUID) ([]userEntity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersByUsername", username, uid)
	ret0, _ := ret[0].([]userEntity.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersByUsername indicates an expected call of FindUsersByUsername.
func (mr *MockUserRepoMockRecorder) FindUsersByUsername(username, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersByUsername", reflect.TypeOf((*MockUserRepo)(nil).FindUsersByUsername), username, uid)
}

// GetAllUsers mocks base method.
func (m *MockUserRepo) GetAllUsers() ([]userEntity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]userEntity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserRepoMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepo)(nil).GetAllUsers))
}

// GetUserByEmail mocks base method.
func (m *MockUserRepo) GetUserByEmail(email string) (userEntity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(userEntity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepoMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockUserRepo) GetUserById(id uuid.UUID) (userEntity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(userEntity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepoMockRecorder) GetUserById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepo)(nil).GetUserById), id)
}

// GetUserRole mocks base method.
func (m *MockUserRepo) GetUserRole(id uuid.UUID) userEntity.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", id)
	ret0, _ := ret[0].(userEntity.Role)
	return ret0
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockUserRepoMockRecorder) GetUserRole(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockUserRepo)(nil).GetUserRole), id)
}

// UpdateCode mocks base method.
func (m *MockUserRepo) UpdateCode(id uuid.UUID, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCode", id, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCode indicates an expected call of UpdateCode.
func (mr *MockUserRepoMockRecorder) UpdateCode(id, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCode", reflect.TypeOf((*MockUserRepo)(nil).UpdateCode), id, code)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(u userEntity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), u)
}
